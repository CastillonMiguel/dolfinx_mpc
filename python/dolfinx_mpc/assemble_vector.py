# Copyright (C) 2020 JÃ¸rgen S. Dokken
#
# This file is part of DOLFINX_MPC
#
# SPDX-License-Identifier:    LGPL-3.0-or-later

import dolfinx
import dolfinx.common
import dolfinx.log
import ufl
import dolfinx_mpc.cpp
from .multipointconstraint import MultiPointConstraint
from petsc4py import PETSc

Timer = dolfinx.common.Timer


def assemble_vector(form: ufl.form.Form, constraint: MultiPointConstraint,
                    b: PETSc.Vec = None,
                    form_compiler_parameters={}, jit_parameters={}) -> PETSc.Vec:
    """
    Assemble a linear form into vector b with corresponding multi point constraint

    Parameters
    ----------
    form
        The linear form
    constraint
        The multi point constraint
    b
        PETSc vector to assemble into (optional)
    form_compiler_parameters
        Parameters used in FFCx compilation of this form. Run `ffcx --help` at
        the commandline to see all available options. Takes priority over all
        other parameter values, except for `scalar_type` which is determined by
        DOLFINx.
    jit_parameters
        Parameters used in CFFI JIT compilation of C code generated by FFCx.
        See `python/dolfinx/jit.py` for all available parameters.
        Takes priority over all other parameter values.

    Returns
    -------
    PETSc.Vec
        The assembled linear form
    """

    cpp_form = dolfinx.Form(form, form_compiler_parameters=form_compiler_parameters,
                            jit_parameters=jit_parameters)._cpp_object

    if b is None:
        b = dolfinx.cpp.la.create_vector(constraint.V_mpc.dofmap.index_map,
                                         constraint.V.dofmap.index_map_bs)
    t = Timer("~MPC: Assemble vector (C++)")
    with b.localForm() as b_local:
        b_local.set(0.0)
        dolfinx_mpc.cpp.mpc.assemble_vector(b_local, cpp_form, constraint._cpp_object)
    t.stop()
    return b
